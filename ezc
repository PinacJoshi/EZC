#!/usr/bin/python3

#Imported Packages
import sys
import os

#Define the available conversions implemented in this list DONOTMAKEFORMATTINGERROR
convert_list = [
    "--tohex","--fromhex",
    "--tobinary","--frombinary"
]
#Define Output operation list
output_list = ["-t"]

def display_error(str = "Unexpected Error Occurred"): #Displays an Error Passed to func and exits the program. If no error is defined it defaults to "Unexpected Error Occurred"
    print("\033[38;5;9m"+str)
    exit()

def terminal_arguments(): #Retrieves PWD and Parrameters Defined by 
    global pwd,command
    pwd = os.getcwd() #To extract PWD
    _, *command = sys.argv #To Extract Input from terminal

def input_method(): #Input Funcion to check if the terminal argument contains "-i" or "-if"
    if "-i" in command: #Is -i present?
        if command.count("-i") == 1:#Is -i present only 1 time?
            if command.index("-i")+1 < len(command):#Is conversion string present?
                global input_string
                input_string = command.pop(command.index("-i")+1)
                command.pop(command.index("-i"))
            else:display_error("Unable to Find Input String")
        else:display_error("Exceded Input Limit \nThe use of Only one -i is Permitted")
    else:display_error("Unable to Find Input String") #Add "-if" argument check here

def check_inputvars(): #Checks if the input vars have proper syntax

    #Subtracts all the valid syntax from the command variable and assigns it to temp as a list
    temp = list(set(command).difference(set(convert_list).union(set(output_list))))

    #Checks if temp variable is empty
    #If it is empty that means proper syntax is used
    #If its not empty it displays an error with the wrong parameters used
    if temp != []:
        display_error("Unknown Parameter \"%s\"" %','.join(temp))          

def execution_formation(): #Forms the Execution Order queue to keep track of execution
    def output_method(): #Determines which output method the user selected
        if "-t" in command:
            if command.count("-t") == 1 & command.count("-c") == 0 & command.count("-of") == 0:
                return("terminal_output")
            else: display_error("Output Option Error")
    
    global execution_order
    execution_order = []

    for func in [_ for _ in command if _ in convert_list]:
        execution_order.append(func.replace("-",""))

    if output_method() != None:
        execution_order.append(output_method)

def conversion_execution(key): #Executes the Conversion funcs, for which the User Calls
    def tohex():
        global input_string
        input_string=input_string.encode().hex()
        #store hex value in input string
        #example: 'hello' turns into '68656c6c6f'

    def tobinary():
        global input_string
        input_string=''.join(format(ord(i), '08b') for i in input_string)
        #store binary value in input string
        #example: 'hello' turns into '0110100001100101011011000110110001101111'
    
    
    def fromhex():  
        global input_string
        try:
            input_string= bytes.fromhex(input_string).decode("utf-8") 
        except:
            #print error
            display_error("invalid input")
    
    
    
    def frombinary():
        global input_string
        try:
            input_string=''.join(chr(int(input_string[i*8:i*8+8],2)) for i in range(len(input_string)//8))
        except:
            display_error("invalid input")
    
    
    locals()[key]()

def print_execution(step,conversion_name):
    print("\n"+"-"*20+"\nConversion Index - "+str(step+1)+" - "+conversion_name)
    print(input_string+"\n"+"-"*20)

def main(): #Main Function to Execute Respecticve Funcs in order
    terminal_arguments() #To Retrive PWD and Terminal Args

    input_method() #To retrive the input method chosen by user
    check_inputvars() #To check if the input vars have correct syntax
    
    execution_formation() #To form excution order queue to keep track of which conversion will take place next
    
    for func in execution_order:
        conversion_execution(func) #To execute the conversion functions formed by execution formation
        print_execution(execution_order.index(func),func)

if __name__ == "__main__":
    main()
